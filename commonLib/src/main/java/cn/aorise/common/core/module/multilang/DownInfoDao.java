//package cn.aorise.common.core.module.multilang;
//
//import android.database.Cursor;
//import android.database.sqlite.SQLiteStatement;
//
//import org.greenrobot.greendao.AbstractDao;
//import org.greenrobot.greendao.Property;
//import org.greenrobot.greendao.internal.DaoConfig;
//import org.greenrobot.greendao.database.Database;
//import org.greenrobot.greendao.database.DatabaseStatement;
//
//import cn.aorise.common.core.module.download.DownInfo;
//
//// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
///**
// * DAO for table "DOWN_INFO".
//*/
//public class DownInfoDao extends AbstractDao<DownInfo, Long> {
//
//    public static final String TABLENAME = "DOWN_INFO";
//
//    /**
//     * Properties of entity DownInfo.<br/>
//     * Can be used for QueryBuilder and for referencing column names.
//     */
//    public static class Properties {
//        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
//        public final static Property SavePath = new Property(1, String.class, "savePath", false, "SAVE_PATH");
//        public final static Property TotalSize = new Property(2, long.class, "totalSize", false, "TOTAL_SIZE");
//        public final static Property ReadLength = new Property(3, long.class, "readLength", false, "READ_LENGTH");
//        public final static Property StateInte = new Property(4, int.class, "stateInte", false, "STATE_INTE");
//        public final static Property Url = new Property(5, String.class, "url", false, "URL");
//        public final static Property UpdateProgress = new Property(6, boolean.class, "updateProgress", false, "UPDATE_PROGRESS");
//        public final static Property Priority = new Property(7, int.class, "priority", false, "PRIORITY");
//    }
//
//
//    public DownInfoDao(DaoConfig config) {
//        super(config);
//    }
//
//    public DownInfoDao(DaoConfig config, DaoSession daoSession) {
//        super(config, daoSession);
//    }
//
//    /** Creates the underlying database table. */
//    public static void createTable(Database db, boolean ifNotExists) {
//        String constraint = ifNotExists? "IF NOT EXISTS ": "";
//        db.execSQL("CREATE TABLE " + constraint + "\"DOWN_INFO\" (" + //
//                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
//                "\"SAVE_PATH\" TEXT," + // 1: savePath
//                "\"TOTAL_SIZE\" INTEGER NOT NULL ," + // 2: totalSize
//                "\"READ_LENGTH\" INTEGER NOT NULL ," + // 3: readLength
//                "\"STATE_INTE\" INTEGER NOT NULL ," + // 4: stateInte
//                "\"URL\" TEXT UNIQUE ," + // 5: url
//                "\"UPDATE_PROGRESS\" INTEGER NOT NULL ," + // 6: updateProgress
//                "\"PRIORITY\" INTEGER NOT NULL );"); // 7: priority
//    }
//
//    /** Drops the underlying database table. */
//    public static void dropTable(Database db, boolean ifExists) {
//        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWN_INFO\"";
//        db.execSQL(sql);
//    }
//
//    @Override
//    protected final void bindValues(DatabaseStatement stmt, DownInfo entity) {
//        stmt.clearBindings();
//
//        Long id = entity.getId();
//        if (id != null) {
//            stmt.bindLong(1, id);
//        }
//
//        String savePath = entity.getSavePath();
//        if (savePath != null) {
//            stmt.bindString(2, savePath);
//        }
//        stmt.bindLong(3, entity.getTotalSize());
//        stmt.bindLong(4, entity.getReadLength());
//        stmt.bindLong(5, entity.getStateInte());
//
//        String url = entity.getUrl();
//        if (url != null) {
//            stmt.bindString(6, url);
//        }
//        stmt.bindLong(7, entity.getUpdateProgress() ? 1L: 0L);
//        stmt.bindLong(8, entity.getPriority());
//    }
//
//    @Override
//    protected final void bindValues(SQLiteStatement stmt, DownInfo entity) {
//        stmt.clearBindings();
//
//        Long id = entity.getId();
//        if (id != null) {
//            stmt.bindLong(1, id);
//        }
//
//        String savePath = entity.getSavePath();
//        if (savePath != null) {
//            stmt.bindString(2, savePath);
//        }
//        stmt.bindLong(3, entity.getTotalSize());
//        stmt.bindLong(4, entity.getReadLength());
//        stmt.bindLong(5, entity.getStateInte());
//
//        String url = entity.getUrl();
//        if (url != null) {
//            stmt.bindString(6, url);
//        }
//        stmt.bindLong(7, entity.getUpdateProgress() ? 1L: 0L);
//        stmt.bindLong(8, entity.getPriority());
//    }
//
//    @Override
//    public Long readKey(Cursor cursor, int offset) {
//        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
//    }
//
//    @Override
//    public DownInfo readEntity(Cursor cursor, int offset) {
//        DownInfo entity = new DownInfo( //
//            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
//            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // savePath
//            cursor.getLong(offset + 2), // totalSize
//            cursor.getLong(offset + 3), // readLength
//            cursor.getInt(offset + 4), // stateInte
//            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
//            cursor.getShort(offset + 6) != 0, // updateProgress
//            cursor.getInt(offset + 7) // priority
//        );
//        return entity;
//    }
//
//    @Override
//    public void readEntity(Cursor cursor, DownInfo entity, int offset) {
//        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
//        entity.setSavePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
//        entity.setTotalSize(cursor.getLong(offset + 2));
//        entity.setReadLength(cursor.getLong(offset + 3));
//        entity.setStateInte(cursor.getInt(offset + 4));
//        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
//        entity.setUpdateProgress(cursor.getShort(offset + 6) != 0);
//        entity.setPriority(cursor.getInt(offset + 7));
//     }
//
//    @Override
//    protected final Long updateKeyAfterInsert(DownInfo entity, long rowId) {
//        entity.setId(rowId);
//        return rowId;
//    }
//
//    @Override
//    public Long getKey(DownInfo entity) {
//        if(entity != null) {
//            return entity.getId();
//        } else {
//            return null;
//        }
//    }
//
//    @Override
//    public boolean hasKey(DownInfo entity) {
//        return entity.getId() != null;
//    }
//
//    @Override
//    protected final boolean isEntityUpdateable() {
//        return true;
//    }
//
//}
